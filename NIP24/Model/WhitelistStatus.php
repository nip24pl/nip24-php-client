<?php
/**
 * WhitelistStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NIP24 Service
 *
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.5
 * Contact: kontakt@nip24.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NIP24\Model;

use \ArrayAccess;
use \NIP24\ObjectSerializer;

/**
 * WhitelistStatus Class Doc Comment
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WhitelistStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WhitelistStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'string',
'nip' => 'string',
'iban' => 'string',
'valid' => 'bool',
'virtual' => 'bool',
'vat_status' => 'int',
'vat_result' => 'string',
'hash_index' => 'int',
'mask_index' => 'int',
'date' => '\DateTime',
'source' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => null,
'nip' => null,
'iban' => null,
'valid' => null,
'virtual' => null,
'vat_status' => 'int32',
'vat_result' => null,
'hash_index' => 'int64',
'mask_index' => 'int64',
'date' => 'date',
'source' => 'url'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'uid',
'nip' => 'nip',
'iban' => 'iban',
'valid' => 'valid',
'virtual' => 'virtual',
'vat_status' => 'vatStatus',
'vat_result' => 'vatResult',
'hash_index' => 'hashIndex',
'mask_index' => 'maskIndex',
'date' => 'date',
'source' => 'source'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
'nip' => 'setNip',
'iban' => 'setIban',
'valid' => 'setValid',
'virtual' => 'setVirtual',
'vat_status' => 'setVatStatus',
'vat_result' => 'setVatResult',
'hash_index' => 'setHashIndex',
'mask_index' => 'setMaskIndex',
'date' => 'setDate',
'source' => 'setSource'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
'nip' => 'getNip',
'iban' => 'getIban',
'valid' => 'getValid',
'virtual' => 'getVirtual',
'vat_status' => 'getVatStatus',
'vat_result' => 'getVatResult',
'hash_index' => 'getHashIndex',
'mask_index' => 'getMaskIndex',
'date' => 'getDate',
'source' => 'getSource'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['nip'] = isset($data['nip']) ? $data['nip'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['virtual'] = isset($data['virtual']) ? $data['virtual'] : null;
        $this->container['vat_status'] = isset($data['vat_status']) ? $data['vat_status'] : null;
        $this->container['vat_result'] = isset($data['vat_result']) ? $data['vat_result'] : null;
        $this->container['hash_index'] = isset($data['hash_index']) ? $data['hash_index'] : null;
        $this->container['mask_index'] = isset($data['mask_index']) ? $data['mask_index'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uid'] === null) {
            $invalidProperties[] = "'uid' can't be null";
        }
        if ($this->container['nip'] === null) {
            $invalidProperties[] = "'nip' can't be null";
        }
        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        if ($this->container['valid'] === null) {
            $invalidProperties[] = "'valid' can't be null";
        }
        if ($this->container['virtual'] === null) {
            $invalidProperties[] = "'virtual' can't be null";
        }
        if ($this->container['vat_status'] === null) {
            $invalidProperties[] = "'vat_status' can't be null";
        }
        if ($this->container['vat_result'] === null) {
            $invalidProperties[] = "'vat_result' can't be null";
        }
        if ($this->container['hash_index'] === null) {
            $invalidProperties[] = "'hash_index' can't be null";
        }
        if ($this->container['mask_index'] === null) {
            $invalidProperties[] = "'mask_index' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets nip
     *
     * @return string
     */
    public function getNip()
    {
        return $this->container['nip'];
    }

    /**
     * Sets nip
     *
     * @param string $nip nip
     *
     * @return $this
     */
    public function setNip($nip)
    {
        $this->container['nip'] = $nip;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban iban
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid valid
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets virtual
     *
     * @return bool
     */
    public function getVirtual()
    {
        return $this->container['virtual'];
    }

    /**
     * Sets virtual
     *
     * @param bool $virtual virtual
     *
     * @return $this
     */
    public function setVirtual($virtual)
    {
        $this->container['virtual'] = $virtual;

        return $this;
    }

    /**
     * Gets vat_status
     *
     * @return int
     */
    public function getVatStatus()
    {
        return $this->container['vat_status'];
    }

    /**
     * Sets vat_status
     *
     * @param int $vat_status vat_status
     *
     * @return $this
     */
    public function setVatStatus($vat_status)
    {
        $this->container['vat_status'] = $vat_status;

        return $this;
    }

    /**
     * Gets vat_result
     *
     * @return string
     */
    public function getVatResult()
    {
        return $this->container['vat_result'];
    }

    /**
     * Sets vat_result
     *
     * @param string $vat_result vat_result
     *
     * @return $this
     */
    public function setVatResult($vat_result)
    {
        $this->container['vat_result'] = $vat_result;

        return $this;
    }

    /**
     * Gets hash_index
     *
     * @return int
     */
    public function getHashIndex()
    {
        return $this->container['hash_index'];
    }

    /**
     * Sets hash_index
     *
     * @param int $hash_index hash_index
     *
     * @return $this
     */
    public function setHashIndex($hash_index)
    {
        $this->container['hash_index'] = $hash_index;

        return $this;
    }

    /**
     * Gets mask_index
     *
     * @return int
     */
    public function getMaskIndex()
    {
        return $this->container['mask_index'];
    }

    /**
     * Sets mask_index
     *
     * @param int $mask_index mask_index
     *
     * @return $this
     */
    public function setMaskIndex($mask_index)
    {
        $this->container['mask_index'] = $mask_index;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
