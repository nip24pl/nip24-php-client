<?php
/**
 * SiedzibaIAdres
 *
 * PHP version 5
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NIP24 Service
 *
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.5
 * Contact: kontakt@nip24.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NIP24\Model;

use \ArrayAccess;
use \NIP24\ObjectSerializer;

/**
 * SiedzibaIAdres Class Doc Comment
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SiedzibaIAdres implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SiedzibaIAdres';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adres_poczty_elektronicznej' => 'string',
'adres_strony_internetowej' => 'string',
'siedziba' => '\NIP24\Model\Siedziba',
'adres' => '\NIP24\Model\Adres'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adres_poczty_elektronicznej' => null,
'adres_strony_internetowej' => null,
'siedziba' => null,
'adres' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adres_poczty_elektronicznej' => 'adresPocztyElektronicznej',
'adres_strony_internetowej' => 'adresStronyInternetowej',
'siedziba' => 'siedziba',
'adres' => 'adres'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adres_poczty_elektronicznej' => 'setAdresPocztyElektronicznej',
'adres_strony_internetowej' => 'setAdresStronyInternetowej',
'siedziba' => 'setSiedziba',
'adres' => 'setAdres'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adres_poczty_elektronicznej' => 'getAdresPocztyElektronicznej',
'adres_strony_internetowej' => 'getAdresStronyInternetowej',
'siedziba' => 'getSiedziba',
'adres' => 'getAdres'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adres_poczty_elektronicznej'] = isset($data['adres_poczty_elektronicznej']) ? $data['adres_poczty_elektronicznej'] : null;
        $this->container['adres_strony_internetowej'] = isset($data['adres_strony_internetowej']) ? $data['adres_strony_internetowej'] : null;
        $this->container['siedziba'] = isset($data['siedziba']) ? $data['siedziba'] : null;
        $this->container['adres'] = isset($data['adres']) ? $data['adres'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adres_poczty_elektronicznej
     *
     * @return string
     */
    public function getAdresPocztyElektronicznej()
    {
        return $this->container['adres_poczty_elektronicznej'];
    }

    /**
     * Sets adres_poczty_elektronicznej
     *
     * @param string $adres_poczty_elektronicznej adres_poczty_elektronicznej
     *
     * @return $this
     */
    public function setAdresPocztyElektronicznej($adres_poczty_elektronicznej)
    {
        $this->container['adres_poczty_elektronicznej'] = $adres_poczty_elektronicznej;

        return $this;
    }

    /**
     * Gets adres_strony_internetowej
     *
     * @return string
     */
    public function getAdresStronyInternetowej()
    {
        return $this->container['adres_strony_internetowej'];
    }

    /**
     * Sets adres_strony_internetowej
     *
     * @param string $adres_strony_internetowej adres_strony_internetowej
     *
     * @return $this
     */
    public function setAdresStronyInternetowej($adres_strony_internetowej)
    {
        $this->container['adres_strony_internetowej'] = $adres_strony_internetowej;

        return $this;
    }

    /**
     * Gets siedziba
     *
     * @return \NIP24\Model\Siedziba
     */
    public function getSiedziba()
    {
        return $this->container['siedziba'];
    }

    /**
     * Sets siedziba
     *
     * @param \NIP24\Model\Siedziba $siedziba siedziba
     *
     * @return $this
     */
    public function setSiedziba($siedziba)
    {
        $this->container['siedziba'] = $siedziba;

        return $this;
    }

    /**
     * Gets adres
     *
     * @return \NIP24\Model\Adres
     */
    public function getAdres()
    {
        return $this->container['adres'];
    }

    /**
     * Sets adres
     *
     * @param \NIP24\Model\Adres $adres adres
     *
     * @return $this
     */
    public function setAdres($adres)
    {
        $this->container['adres'] = $adres;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
