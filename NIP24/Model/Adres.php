<?php
/**
 * Adres
 *
 * PHP version 5
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NIP24 Service
 *
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.5
 * Contact: kontakt@nip24.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NIP24\Model;

use \ArrayAccess;
use \NIP24\ObjectSerializer;

/**
 * Adres Class Doc Comment
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Adres implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Adres';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ulica' => 'string',
'nr_domu' => 'string',
'nr_lokalu' => 'string',
'miejscowosc' => 'string',
'kod_pocztowy' => 'string',
'poczta' => 'string',
'kraj' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ulica' => null,
'nr_domu' => null,
'nr_lokalu' => null,
'miejscowosc' => null,
'kod_pocztowy' => null,
'poczta' => null,
'kraj' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ulica' => 'ulica',
'nr_domu' => 'nrDomu',
'nr_lokalu' => 'nrLokalu',
'miejscowosc' => 'miejscowosc',
'kod_pocztowy' => 'kodPocztowy',
'poczta' => 'poczta',
'kraj' => 'kraj'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ulica' => 'setUlica',
'nr_domu' => 'setNrDomu',
'nr_lokalu' => 'setNrLokalu',
'miejscowosc' => 'setMiejscowosc',
'kod_pocztowy' => 'setKodPocztowy',
'poczta' => 'setPoczta',
'kraj' => 'setKraj'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ulica' => 'getUlica',
'nr_domu' => 'getNrDomu',
'nr_lokalu' => 'getNrLokalu',
'miejscowosc' => 'getMiejscowosc',
'kod_pocztowy' => 'getKodPocztowy',
'poczta' => 'getPoczta',
'kraj' => 'getKraj'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ulica'] = isset($data['ulica']) ? $data['ulica'] : null;
        $this->container['nr_domu'] = isset($data['nr_domu']) ? $data['nr_domu'] : null;
        $this->container['nr_lokalu'] = isset($data['nr_lokalu']) ? $data['nr_lokalu'] : null;
        $this->container['miejscowosc'] = isset($data['miejscowosc']) ? $data['miejscowosc'] : null;
        $this->container['kod_pocztowy'] = isset($data['kod_pocztowy']) ? $data['kod_pocztowy'] : null;
        $this->container['poczta'] = isset($data['poczta']) ? $data['poczta'] : null;
        $this->container['kraj'] = isset($data['kraj']) ? $data['kraj'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ulica
     *
     * @return string
     */
    public function getUlica()
    {
        return $this->container['ulica'];
    }

    /**
     * Sets ulica
     *
     * @param string $ulica ulica
     *
     * @return $this
     */
    public function setUlica($ulica)
    {
        $this->container['ulica'] = $ulica;

        return $this;
    }

    /**
     * Gets nr_domu
     *
     * @return string
     */
    public function getNrDomu()
    {
        return $this->container['nr_domu'];
    }

    /**
     * Sets nr_domu
     *
     * @param string $nr_domu nr_domu
     *
     * @return $this
     */
    public function setNrDomu($nr_domu)
    {
        $this->container['nr_domu'] = $nr_domu;

        return $this;
    }

    /**
     * Gets nr_lokalu
     *
     * @return string
     */
    public function getNrLokalu()
    {
        return $this->container['nr_lokalu'];
    }

    /**
     * Sets nr_lokalu
     *
     * @param string $nr_lokalu nr_lokalu
     *
     * @return $this
     */
    public function setNrLokalu($nr_lokalu)
    {
        $this->container['nr_lokalu'] = $nr_lokalu;

        return $this;
    }

    /**
     * Gets miejscowosc
     *
     * @return string
     */
    public function getMiejscowosc()
    {
        return $this->container['miejscowosc'];
    }

    /**
     * Sets miejscowosc
     *
     * @param string $miejscowosc miejscowosc
     *
     * @return $this
     */
    public function setMiejscowosc($miejscowosc)
    {
        $this->container['miejscowosc'] = $miejscowosc;

        return $this;
    }

    /**
     * Gets kod_pocztowy
     *
     * @return string
     */
    public function getKodPocztowy()
    {
        return $this->container['kod_pocztowy'];
    }

    /**
     * Sets kod_pocztowy
     *
     * @param string $kod_pocztowy kod_pocztowy
     *
     * @return $this
     */
    public function setKodPocztowy($kod_pocztowy)
    {
        $this->container['kod_pocztowy'] = $kod_pocztowy;

        return $this;
    }

    /**
     * Gets poczta
     *
     * @return string
     */
    public function getPoczta()
    {
        return $this->container['poczta'];
    }

    /**
     * Sets poczta
     *
     * @param string $poczta poczta
     *
     * @return $this
     */
    public function setPoczta($poczta)
    {
        $this->container['poczta'] = $poczta;

        return $this;
    }

    /**
     * Gets kraj
     *
     * @return string
     */
    public function getKraj()
    {
        return $this->container['kraj'];
    }

    /**
     * Sets kraj
     *
     * @param string $kraj kraj
     *
     * @return $this
     */
    public function setKraj($kraj)
    {
        $this->container['kraj'] = $kraj;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
