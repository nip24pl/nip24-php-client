<?php
/**
 * Podmioty
 *
 * PHP version 5
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NIP24 Service
 *
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.5
 * Contact: kontakt@nip24.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NIP24\Model;

use \ArrayAccess;
use \NIP24\ObjectSerializer;

/**
 * Podmioty Class Doc Comment
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Podmioty implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Podmioty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nazwa' => 'string',
'kraj_nazwa_rejestru_ewidencji' => 'string',
'numer_w_rejestrze_albo_ewidencji' => 'string',
'nazwa_sadu_organu_prowadzacego_rejestr_ewidencje' => 'string',
'identyfikatory' => '\NIP24\Model\IdentyfikatoryPodmiotu'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nazwa' => null,
'kraj_nazwa_rejestru_ewidencji' => null,
'numer_w_rejestrze_albo_ewidencji' => null,
'nazwa_sadu_organu_prowadzacego_rejestr_ewidencje' => null,
'identyfikatory' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nazwa' => 'nazwa',
'kraj_nazwa_rejestru_ewidencji' => 'krajNazwaRejestruEwidencji',
'numer_w_rejestrze_albo_ewidencji' => 'numerWRejestrzeAlboEwidencji',
'nazwa_sadu_organu_prowadzacego_rejestr_ewidencje' => 'nazwaSaduOrganuProwadzacegoRejestrEwidencje',
'identyfikatory' => 'identyfikatory'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nazwa' => 'setNazwa',
'kraj_nazwa_rejestru_ewidencji' => 'setKrajNazwaRejestruEwidencji',
'numer_w_rejestrze_albo_ewidencji' => 'setNumerWRejestrzeAlboEwidencji',
'nazwa_sadu_organu_prowadzacego_rejestr_ewidencje' => 'setNazwaSaduOrganuProwadzacegoRejestrEwidencje',
'identyfikatory' => 'setIdentyfikatory'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nazwa' => 'getNazwa',
'kraj_nazwa_rejestru_ewidencji' => 'getKrajNazwaRejestruEwidencji',
'numer_w_rejestrze_albo_ewidencji' => 'getNumerWRejestrzeAlboEwidencji',
'nazwa_sadu_organu_prowadzacego_rejestr_ewidencje' => 'getNazwaSaduOrganuProwadzacegoRejestrEwidencje',
'identyfikatory' => 'getIdentyfikatory'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nazwa'] = isset($data['nazwa']) ? $data['nazwa'] : null;
        $this->container['kraj_nazwa_rejestru_ewidencji'] = isset($data['kraj_nazwa_rejestru_ewidencji']) ? $data['kraj_nazwa_rejestru_ewidencji'] : null;
        $this->container['numer_w_rejestrze_albo_ewidencji'] = isset($data['numer_w_rejestrze_albo_ewidencji']) ? $data['numer_w_rejestrze_albo_ewidencji'] : null;
        $this->container['nazwa_sadu_organu_prowadzacego_rejestr_ewidencje'] = isset($data['nazwa_sadu_organu_prowadzacego_rejestr_ewidencje']) ? $data['nazwa_sadu_organu_prowadzacego_rejestr_ewidencje'] : null;
        $this->container['identyfikatory'] = isset($data['identyfikatory']) ? $data['identyfikatory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nazwa
     *
     * @return string
     */
    public function getNazwa()
    {
        return $this->container['nazwa'];
    }

    /**
     * Sets nazwa
     *
     * @param string $nazwa nazwa
     *
     * @return $this
     */
    public function setNazwa($nazwa)
    {
        $this->container['nazwa'] = $nazwa;

        return $this;
    }

    /**
     * Gets kraj_nazwa_rejestru_ewidencji
     *
     * @return string
     */
    public function getKrajNazwaRejestruEwidencji()
    {
        return $this->container['kraj_nazwa_rejestru_ewidencji'];
    }

    /**
     * Sets kraj_nazwa_rejestru_ewidencji
     *
     * @param string $kraj_nazwa_rejestru_ewidencji kraj_nazwa_rejestru_ewidencji
     *
     * @return $this
     */
    public function setKrajNazwaRejestruEwidencji($kraj_nazwa_rejestru_ewidencji)
    {
        $this->container['kraj_nazwa_rejestru_ewidencji'] = $kraj_nazwa_rejestru_ewidencji;

        return $this;
    }

    /**
     * Gets numer_w_rejestrze_albo_ewidencji
     *
     * @return string
     */
    public function getNumerWRejestrzeAlboEwidencji()
    {
        return $this->container['numer_w_rejestrze_albo_ewidencji'];
    }

    /**
     * Sets numer_w_rejestrze_albo_ewidencji
     *
     * @param string $numer_w_rejestrze_albo_ewidencji numer_w_rejestrze_albo_ewidencji
     *
     * @return $this
     */
    public function setNumerWRejestrzeAlboEwidencji($numer_w_rejestrze_albo_ewidencji)
    {
        $this->container['numer_w_rejestrze_albo_ewidencji'] = $numer_w_rejestrze_albo_ewidencji;

        return $this;
    }

    /**
     * Gets nazwa_sadu_organu_prowadzacego_rejestr_ewidencje
     *
     * @return string
     */
    public function getNazwaSaduOrganuProwadzacegoRejestrEwidencje()
    {
        return $this->container['nazwa_sadu_organu_prowadzacego_rejestr_ewidencje'];
    }

    /**
     * Sets nazwa_sadu_organu_prowadzacego_rejestr_ewidencje
     *
     * @param string $nazwa_sadu_organu_prowadzacego_rejestr_ewidencje nazwa_sadu_organu_prowadzacego_rejestr_ewidencje
     *
     * @return $this
     */
    public function setNazwaSaduOrganuProwadzacegoRejestrEwidencje($nazwa_sadu_organu_prowadzacego_rejestr_ewidencje)
    {
        $this->container['nazwa_sadu_organu_prowadzacego_rejestr_ewidencje'] = $nazwa_sadu_organu_prowadzacego_rejestr_ewidencje;

        return $this;
    }

    /**
     * Gets identyfikatory
     *
     * @return \NIP24\Model\IdentyfikatoryPodmiotu
     */
    public function getIdentyfikatory()
    {
        return $this->container['identyfikatory'];
    }

    /**
     * Sets identyfikatory
     *
     * @param \NIP24\Model\IdentyfikatoryPodmiotu $identyfikatory identyfikatory
     *
     * @return $this
     */
    public function setIdentyfikatory($identyfikatory)
    {
        $this->container['identyfikatory'] = $identyfikatory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
