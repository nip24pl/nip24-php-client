<?php
/**
 * DanePodmiotu
 *
 * PHP version 5
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NIP24 Service
 *
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.5
 * Contact: kontakt@nip24.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NIP24\Model;

use \ArrayAccess;
use \NIP24\ObjectSerializer;

/**
 * DanePodmiotu Class Doc Comment
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DanePodmiotu implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DanePodmiotu';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'forma_prawna' => 'string',
'nazwa' => 'string',
'czy_prowadzi_dzialalnosc_z_innymi_podmiotami' => 'bool',
'czy_posiada_status_opp' => 'bool',
'identyfikatory' => '\NIP24\Model\IdentyfikatoryPodmiotu',
'dane_o_wczesniejszej_rejestracji' => '\NIP24\Model\DaneOWczesniejszejRejestracji'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'forma_prawna' => null,
'nazwa' => null,
'czy_prowadzi_dzialalnosc_z_innymi_podmiotami' => null,
'czy_posiada_status_opp' => null,
'identyfikatory' => null,
'dane_o_wczesniejszej_rejestracji' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'forma_prawna' => 'formaPrawna',
'nazwa' => 'nazwa',
'czy_prowadzi_dzialalnosc_z_innymi_podmiotami' => 'czyProwadziDzialalnoscZInnymiPodmiotami',
'czy_posiada_status_opp' => 'czyPosiadaStatusOPP',
'identyfikatory' => 'identyfikatory',
'dane_o_wczesniejszej_rejestracji' => 'daneOWczesniejszejRejestracji'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'forma_prawna' => 'setFormaPrawna',
'nazwa' => 'setNazwa',
'czy_prowadzi_dzialalnosc_z_innymi_podmiotami' => 'setCzyProwadziDzialalnoscZInnymiPodmiotami',
'czy_posiada_status_opp' => 'setCzyPosiadaStatusOpp',
'identyfikatory' => 'setIdentyfikatory',
'dane_o_wczesniejszej_rejestracji' => 'setDaneOWczesniejszejRejestracji'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'forma_prawna' => 'getFormaPrawna',
'nazwa' => 'getNazwa',
'czy_prowadzi_dzialalnosc_z_innymi_podmiotami' => 'getCzyProwadziDzialalnoscZInnymiPodmiotami',
'czy_posiada_status_opp' => 'getCzyPosiadaStatusOpp',
'identyfikatory' => 'getIdentyfikatory',
'dane_o_wczesniejszej_rejestracji' => 'getDaneOWczesniejszejRejestracji'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['forma_prawna'] = isset($data['forma_prawna']) ? $data['forma_prawna'] : null;
        $this->container['nazwa'] = isset($data['nazwa']) ? $data['nazwa'] : null;
        $this->container['czy_prowadzi_dzialalnosc_z_innymi_podmiotami'] = isset($data['czy_prowadzi_dzialalnosc_z_innymi_podmiotami']) ? $data['czy_prowadzi_dzialalnosc_z_innymi_podmiotami'] : null;
        $this->container['czy_posiada_status_opp'] = isset($data['czy_posiada_status_opp']) ? $data['czy_posiada_status_opp'] : null;
        $this->container['identyfikatory'] = isset($data['identyfikatory']) ? $data['identyfikatory'] : null;
        $this->container['dane_o_wczesniejszej_rejestracji'] = isset($data['dane_o_wczesniejszej_rejestracji']) ? $data['dane_o_wczesniejszej_rejestracji'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets forma_prawna
     *
     * @return string
     */
    public function getFormaPrawna()
    {
        return $this->container['forma_prawna'];
    }

    /**
     * Sets forma_prawna
     *
     * @param string $forma_prawna forma_prawna
     *
     * @return $this
     */
    public function setFormaPrawna($forma_prawna)
    {
        $this->container['forma_prawna'] = $forma_prawna;

        return $this;
    }

    /**
     * Gets nazwa
     *
     * @return string
     */
    public function getNazwa()
    {
        return $this->container['nazwa'];
    }

    /**
     * Sets nazwa
     *
     * @param string $nazwa nazwa
     *
     * @return $this
     */
    public function setNazwa($nazwa)
    {
        $this->container['nazwa'] = $nazwa;

        return $this;
    }

    /**
     * Gets czy_prowadzi_dzialalnosc_z_innymi_podmiotami
     *
     * @return bool
     */
    public function getCzyProwadziDzialalnoscZInnymiPodmiotami()
    {
        return $this->container['czy_prowadzi_dzialalnosc_z_innymi_podmiotami'];
    }

    /**
     * Sets czy_prowadzi_dzialalnosc_z_innymi_podmiotami
     *
     * @param bool $czy_prowadzi_dzialalnosc_z_innymi_podmiotami czy_prowadzi_dzialalnosc_z_innymi_podmiotami
     *
     * @return $this
     */
    public function setCzyProwadziDzialalnoscZInnymiPodmiotami($czy_prowadzi_dzialalnosc_z_innymi_podmiotami)
    {
        $this->container['czy_prowadzi_dzialalnosc_z_innymi_podmiotami'] = $czy_prowadzi_dzialalnosc_z_innymi_podmiotami;

        return $this;
    }

    /**
     * Gets czy_posiada_status_opp
     *
     * @return bool
     */
    public function getCzyPosiadaStatusOpp()
    {
        return $this->container['czy_posiada_status_opp'];
    }

    /**
     * Sets czy_posiada_status_opp
     *
     * @param bool $czy_posiada_status_opp czy_posiada_status_opp
     *
     * @return $this
     */
    public function setCzyPosiadaStatusOpp($czy_posiada_status_opp)
    {
        $this->container['czy_posiada_status_opp'] = $czy_posiada_status_opp;

        return $this;
    }

    /**
     * Gets identyfikatory
     *
     * @return \NIP24\Model\IdentyfikatoryPodmiotu
     */
    public function getIdentyfikatory()
    {
        return $this->container['identyfikatory'];
    }

    /**
     * Sets identyfikatory
     *
     * @param \NIP24\Model\IdentyfikatoryPodmiotu $identyfikatory identyfikatory
     *
     * @return $this
     */
    public function setIdentyfikatory($identyfikatory)
    {
        $this->container['identyfikatory'] = $identyfikatory;

        return $this;
    }

    /**
     * Gets dane_o_wczesniejszej_rejestracji
     *
     * @return \NIP24\Model\DaneOWczesniejszejRejestracji
     */
    public function getDaneOWczesniejszejRejestracji()
    {
        return $this->container['dane_o_wczesniejszej_rejestracji'];
    }

    /**
     * Sets dane_o_wczesniejszej_rejestracji
     *
     * @param \NIP24\Model\DaneOWczesniejszejRejestracji $dane_o_wczesniejszej_rejestracji dane_o_wczesniejszej_rejestracji
     *
     * @return $this
     */
    public function setDaneOWczesniejszejRejestracji($dane_o_wczesniejszej_rejestracji)
    {
        $this->container['dane_o_wczesniejszej_rejestracji'] = $dane_o_wczesniejszej_rejestracji;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
