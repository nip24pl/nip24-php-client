<?php
/**
 * AllData
 *
 * PHP version 5
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NIP24 Service
 *
 * NIP24 Service
 *
 * OpenAPI spec version: 1.3.5
 * Contact: kontakt@nip24.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace NIP24\Model;
use \NIP24\ObjectSerializer;

/**
 * AllData Class Doc Comment
 *
 * @category Class
 * @package  NIP24
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllData extends InvoiceData 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AllData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
'regon' => 'string',
'shortname' => 'string',
'secondname' => 'string',
'street_code' => 'string',
'city_code' => 'string',
'community' => 'string',
'community_code' => 'string',
'county' => 'string',
'county_code' => 'string',
'state' => 'string',
'state_code' => 'string',
'creation_date' => '\DateTime',
'start_date' => '\DateTime',
'registration_date' => '\DateTime',
'hold_date' => '\DateTime',
'reneval_date' => '\DateTime',
'last_update_date' => '\DateTime',
'end_date' => '\DateTime',
'registry_entity' => '\NIP24\Model\AllDataEntity',
'registry' => '\NIP24\Model\AllDataEntity',
'record' => '\NIP24\Model\AllDataRecord',
'basic_legal_form' => '\NIP24\Model\AllDataEntity',
'specific_legal_form' => '\NIP24\Model\AllDataEntity',
'ownership_form' => '\NIP24\Model\AllDataEntity',
'pkds' => '\NIP24\Model\PKD[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
'regon' => null,
'shortname' => null,
'secondname' => null,
'street_code' => null,
'city_code' => null,
'community' => null,
'community_code' => null,
'county' => null,
'county_code' => null,
'state' => null,
'state_code' => null,
'creation_date' => 'date-time',
'start_date' => 'date-time',
'registration_date' => 'date-time',
'hold_date' => 'date-time',
'reneval_date' => 'date-time',
'last_update_date' => 'date-time',
'end_date' => 'date-time',
'registry_entity' => null,
'registry' => null,
'record' => null,
'basic_legal_form' => null,
'specific_legal_form' => null,
'ownership_form' => null,
'pkds' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
'regon' => 'regon',
'shortname' => 'shortname',
'secondname' => 'secondname',
'street_code' => 'streetCode',
'city_code' => 'cityCode',
'community' => 'community',
'community_code' => 'communityCode',
'county' => 'county',
'county_code' => 'countyCode',
'state' => 'state',
'state_code' => 'stateCode',
'creation_date' => 'creationDate',
'start_date' => 'startDate',
'registration_date' => 'registrationDate',
'hold_date' => 'holdDate',
'reneval_date' => 'renevalDate',
'last_update_date' => 'lastUpdateDate',
'end_date' => 'endDate',
'registry_entity' => 'registryEntity',
'registry' => 'registry',
'record' => 'record',
'basic_legal_form' => 'basicLegalForm',
'specific_legal_form' => 'specificLegalForm',
'ownership_form' => 'ownershipForm',
'pkds' => 'PKDs'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
'regon' => 'setRegon',
'shortname' => 'setShortname',
'secondname' => 'setSecondname',
'street_code' => 'setStreetCode',
'city_code' => 'setCityCode',
'community' => 'setCommunity',
'community_code' => 'setCommunityCode',
'county' => 'setCounty',
'county_code' => 'setCountyCode',
'state' => 'setState',
'state_code' => 'setStateCode',
'creation_date' => 'setCreationDate',
'start_date' => 'setStartDate',
'registration_date' => 'setRegistrationDate',
'hold_date' => 'setHoldDate',
'reneval_date' => 'setRenevalDate',
'last_update_date' => 'setLastUpdateDate',
'end_date' => 'setEndDate',
'registry_entity' => 'setRegistryEntity',
'registry' => 'setRegistry',
'record' => 'setRecord',
'basic_legal_form' => 'setBasicLegalForm',
'specific_legal_form' => 'setSpecificLegalForm',
'ownership_form' => 'setOwnershipForm',
'pkds' => 'setPkds'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
'regon' => 'getRegon',
'shortname' => 'getShortname',
'secondname' => 'getSecondname',
'street_code' => 'getStreetCode',
'city_code' => 'getCityCode',
'community' => 'getCommunity',
'community_code' => 'getCommunityCode',
'county' => 'getCounty',
'county_code' => 'getCountyCode',
'state' => 'getState',
'state_code' => 'getStateCode',
'creation_date' => 'getCreationDate',
'start_date' => 'getStartDate',
'registration_date' => 'getRegistrationDate',
'hold_date' => 'getHoldDate',
'reneval_date' => 'getRenevalDate',
'last_update_date' => 'getLastUpdateDate',
'end_date' => 'getEndDate',
'registry_entity' => 'getRegistryEntity',
'registry' => 'getRegistry',
'record' => 'getRecord',
'basic_legal_form' => 'getBasicLegalForm',
'specific_legal_form' => 'getSpecificLegalForm',
'ownership_form' => 'getOwnershipForm',
'pkds' => 'getPkds'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['regon'] = isset($data['regon']) ? $data['regon'] : null;
        $this->container['shortname'] = isset($data['shortname']) ? $data['shortname'] : null;
        $this->container['secondname'] = isset($data['secondname']) ? $data['secondname'] : null;
        $this->container['street_code'] = isset($data['street_code']) ? $data['street_code'] : null;
        $this->container['city_code'] = isset($data['city_code']) ? $data['city_code'] : null;
        $this->container['community'] = isset($data['community']) ? $data['community'] : null;
        $this->container['community_code'] = isset($data['community_code']) ? $data['community_code'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['county_code'] = isset($data['county_code']) ? $data['county_code'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_code'] = isset($data['state_code']) ? $data['state_code'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['hold_date'] = isset($data['hold_date']) ? $data['hold_date'] : null;
        $this->container['reneval_date'] = isset($data['reneval_date']) ? $data['reneval_date'] : null;
        $this->container['last_update_date'] = isset($data['last_update_date']) ? $data['last_update_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['registry_entity'] = isset($data['registry_entity']) ? $data['registry_entity'] : null;
        $this->container['registry'] = isset($data['registry']) ? $data['registry'] : null;
        $this->container['record'] = isset($data['record']) ? $data['record'] : null;
        $this->container['basic_legal_form'] = isset($data['basic_legal_form']) ? $data['basic_legal_form'] : null;
        $this->container['specific_legal_form'] = isset($data['specific_legal_form']) ? $data['specific_legal_form'] : null;
        $this->container['ownership_form'] = isset($data['ownership_form']) ? $data['ownership_form'] : null;
        $this->container['pkds'] = isset($data['pkds']) ? $data['pkds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets regon
     *
     * @return string
     */
    public function getRegon()
    {
        return $this->container['regon'];
    }

    /**
     * Sets regon
     *
     * @param string $regon regon
     *
     * @return $this
     */
    public function setRegon($regon)
    {
        $this->container['regon'] = $regon;

        return $this;
    }

    /**
     * Gets shortname
     *
     * @return string
     */
    public function getShortname()
    {
        return $this->container['shortname'];
    }

    /**
     * Sets shortname
     *
     * @param string $shortname shortname
     *
     * @return $this
     */
    public function setShortname($shortname)
    {
        $this->container['shortname'] = $shortname;

        return $this;
    }

    /**
     * Gets secondname
     *
     * @return string
     */
    public function getSecondname()
    {
        return $this->container['secondname'];
    }

    /**
     * Sets secondname
     *
     * @param string $secondname secondname
     *
     * @return $this
     */
    public function setSecondname($secondname)
    {
        $this->container['secondname'] = $secondname;

        return $this;
    }

    /**
     * Gets street_code
     *
     * @return string
     */
    public function getStreetCode()
    {
        return $this->container['street_code'];
    }

    /**
     * Sets street_code
     *
     * @param string $street_code street_code
     *
     * @return $this
     */
    public function setStreetCode($street_code)
    {
        $this->container['street_code'] = $street_code;

        return $this;
    }

    /**
     * Gets city_code
     *
     * @return string
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     *
     * @param string $city_code city_code
     *
     * @return $this
     */
    public function setCityCode($city_code)
    {
        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets community
     *
     * @return string
     */
    public function getCommunity()
    {
        return $this->container['community'];
    }

    /**
     * Sets community
     *
     * @param string $community community
     *
     * @return $this
     */
    public function setCommunity($community)
    {
        $this->container['community'] = $community;

        return $this;
    }

    /**
     * Gets community_code
     *
     * @return string
     */
    public function getCommunityCode()
    {
        return $this->container['community_code'];
    }

    /**
     * Sets community_code
     *
     * @param string $community_code community_code
     *
     * @return $this
     */
    public function setCommunityCode($community_code)
    {
        $this->container['community_code'] = $community_code;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets county_code
     *
     * @return string
     */
    public function getCountyCode()
    {
        return $this->container['county_code'];
    }

    /**
     * Sets county_code
     *
     * @param string $county_code county_code
     *
     * @return $this
     */
    public function setCountyCode($county_code)
    {
        $this->container['county_code'] = $county_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string $state_code state_code
     *
     * @return $this
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return \DateTime
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param \DateTime $registration_date registration_date
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets hold_date
     *
     * @return \DateTime
     */
    public function getHoldDate()
    {
        return $this->container['hold_date'];
    }

    /**
     * Sets hold_date
     *
     * @param \DateTime $hold_date hold_date
     *
     * @return $this
     */
    public function setHoldDate($hold_date)
    {
        $this->container['hold_date'] = $hold_date;

        return $this;
    }

    /**
     * Gets reneval_date
     *
     * @return \DateTime
     */
    public function getRenevalDate()
    {
        return $this->container['reneval_date'];
    }

    /**
     * Sets reneval_date
     *
     * @param \DateTime $reneval_date reneval_date
     *
     * @return $this
     */
    public function setRenevalDate($reneval_date)
    {
        $this->container['reneval_date'] = $reneval_date;

        return $this;
    }

    /**
     * Gets last_update_date
     *
     * @return \DateTime
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     *
     * @param \DateTime $last_update_date last_update_date
     *
     * @return $this
     */
    public function setLastUpdateDate($last_update_date)
    {
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets registry_entity
     *
     * @return \NIP24\Model\AllDataEntity
     */
    public function getRegistryEntity()
    {
        return $this->container['registry_entity'];
    }

    /**
     * Sets registry_entity
     *
     * @param \NIP24\Model\AllDataEntity $registry_entity registry_entity
     *
     * @return $this
     */
    public function setRegistryEntity($registry_entity)
    {
        $this->container['registry_entity'] = $registry_entity;

        return $this;
    }

    /**
     * Gets registry
     *
     * @return \NIP24\Model\AllDataEntity
     */
    public function getRegistry()
    {
        return $this->container['registry'];
    }

    /**
     * Sets registry
     *
     * @param \NIP24\Model\AllDataEntity $registry registry
     *
     * @return $this
     */
    public function setRegistry($registry)
    {
        $this->container['registry'] = $registry;

        return $this;
    }

    /**
     * Gets record
     *
     * @return \NIP24\Model\AllDataRecord
     */
    public function getRecord()
    {
        return $this->container['record'];
    }

    /**
     * Sets record
     *
     * @param \NIP24\Model\AllDataRecord $record record
     *
     * @return $this
     */
    public function setRecord($record)
    {
        $this->container['record'] = $record;

        return $this;
    }

    /**
     * Gets basic_legal_form
     *
     * @return \NIP24\Model\AllDataEntity
     */
    public function getBasicLegalForm()
    {
        return $this->container['basic_legal_form'];
    }

    /**
     * Sets basic_legal_form
     *
     * @param \NIP24\Model\AllDataEntity $basic_legal_form basic_legal_form
     *
     * @return $this
     */
    public function setBasicLegalForm($basic_legal_form)
    {
        $this->container['basic_legal_form'] = $basic_legal_form;

        return $this;
    }

    /**
     * Gets specific_legal_form
     *
     * @return \NIP24\Model\AllDataEntity
     */
    public function getSpecificLegalForm()
    {
        return $this->container['specific_legal_form'];
    }

    /**
     * Sets specific_legal_form
     *
     * @param \NIP24\Model\AllDataEntity $specific_legal_form specific_legal_form
     *
     * @return $this
     */
    public function setSpecificLegalForm($specific_legal_form)
    {
        $this->container['specific_legal_form'] = $specific_legal_form;

        return $this;
    }

    /**
     * Gets ownership_form
     *
     * @return \NIP24\Model\AllDataEntity
     */
    public function getOwnershipForm()
    {
        return $this->container['ownership_form'];
    }

    /**
     * Sets ownership_form
     *
     * @param \NIP24\Model\AllDataEntity $ownership_form ownership_form
     *
     * @return $this
     */
    public function setOwnershipForm($ownership_form)
    {
        $this->container['ownership_form'] = $ownership_form;

        return $this;
    }

    /**
     * Gets pkds
     *
     * @return \NIP24\Model\PKD[]
     */
    public function getPkds()
    {
        return $this->container['pkds'];
    }

    /**
     * Sets pkds
     *
     * @param \NIP24\Model\PKD[] $pkds pkds
     *
     * @return $this
     */
    public function setPkds($pkds)
    {
        $this->container['pkds'] = $pkds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
